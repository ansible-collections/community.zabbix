---
- name: Prepare
  hosts: all
  pre_tasks:
    - name: "Set short version name"
      ansible.builtin.set_fact:
        zabbix_python_prefix: "python{% if ansible_python_version is version('3', '>=') %}3{% endif %}"

    - name: "Installing packages on CentOS"
      ansible.builtin.yum:
        name:
          - net-tools
          - which
          - sudo
        state: present
      register: installation_dependencies
      until: installation_dependencies is succeeded
      when:
        - ansible_os_family == 'RedHat'

    - name: "Make sure the docs can be installed. (Debian)"
      ansible.builtin.lineinfile:
        path: /etc/dpkg/dpkg.cfg.d/excludes
        state: absent
        regexp: "path-exclude=/usr/share/doc/*"
      when:
        - ansible_os_family != 'RedHat'

    - name: Check if warn parameter can be used for shell module
      ansible.builtin.set_fact:
        produce_warn: False
      when: ansible_version.full is version("2.14", "<")

    # https://github.com/geerlingguy/ansible-role-java/issues/64
    - name: "Apt update"
      ansible.builtin.shell: "apt-get update && mkdir -p /usr/share/man/man1"
      args:
        warn: "{{ produce_warn | default(omit) }}"
      register: installation_dependencies
      until: installation_dependencies is succeeded
      when:
        - ansible_os_family != 'RedHat'

    - name: "Installing packages on NON-CentOS"
      ansible.builtin.apt:
        name:
          - net-tools
          - apt-utils
          - procps
          - "{{ zabbix_python_prefix }}-pip"
          - gpg-agent
          - "{{ zabbix_python_prefix }}-apt"
          - sudo
          - software-properties-common
        update_cache: true
        state: present
      register: installation_dependencies
      until: installation_dependencies is succeeded
      when:
        - ansible_os_family != 'RedHat'
