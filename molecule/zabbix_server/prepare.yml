---
- name: Prepare
  hosts: localhost
  connection: local
  pre_tasks:
    - name: "Create MySQL Container"
      docker_container:
        name: "{{ item.name }}-db"
        image: mysql:8.0
        state: started
        recreate: true
        networks:
          - name: zabbix
        env:
          MYSQL_ROOT_PASSWORD: changeme
      no_log: true
      with_items: "{{ molecule_yml.platforms }}"
      when:
        - '"mysql" in item.groups'

    - name: "Create postgresql Container"
      docker_container:
        name: "{{ item.name }}-db"
        image: postgres:13
        state: started
        recreate: true
        networks:
          - name: zabbix
        env:
          POSTGRES_PASSWORD: changeme
      no_log: true
      with_items: "{{ molecule_yml.platforms }}"
      when:
        - '"pgsql" in item.groups'

- name: Prepare
  hosts: all
  tasks:
    - name: "Create group for imaginary host"
      add_host:
        name: imaginary-host
        groups:
          - mysql
          - postgresql
      changed_when: false

    - name: "Installing packages on CentOS"
      ansible.builtin.yum:
        name:
          - net-tools
          - which
          - sudo
        state: present
      register: installation_dependencies
      until: installation_dependencies is succeeded
      when:
        - ansible_os_family == 'RedHat'

    - name: "Apt update"
      ansible.builtin.shell: "apt-get update && echo exit 0 > /usr/sbin/policy-rc.d"
      register: installation_dependencies
      until: installation_dependencies is succeeded
      when: ansible_facts['os_family'] == 'Debian'

    - name: "Installing packages on Debian family"
      ansible.builtin.apt:
        name:
          - net-tools
          - apt-utils
          - python3-pip
          - gpg-agent
          - sudo
        update_cache: true
        state: present
      register: installation_dependencies
      until: installation_dependencies is succeeded
      when: ansible_facts['os_family'] == 'Debian'

    - name: "Installing packages on Suse"
      community.general.zypper:
        name:
          - iproute2
          - sudo
        state: present
        update_cache: true
      register: installation_dependencies
      until: installation_dependencies is succeeded
      when: ansible_facts['os_family'] == 'Suse'

    - name: "Configure SUDO."
      ansible.builtin.lineinfile:
        dest: /etc/sudoers
        line: "Defaults    !requiretty"
        state: present
