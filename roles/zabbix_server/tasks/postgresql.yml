---
# task file for postgresql
- name: "Install PostgreSQL dependencies"
  ansible.builtin.package:
    name: "{{ _zabbix_server_pgsql_dependencies | select | list }}"
  environment:
    http_proxy: "{{ zabbix_http_proxy | default(None) | default(omit) }}"
    https_proxy: "{{ zabbix_https_proxy | default(None) | default(omit) }}"
  register: _zabbix_server_dependencies_installed
  until: _zabbix_server_dependencies_installed is succeeded
  become: true
  tags:
    - install
    - database
    - dependencies

- name: "PostgreSQL | Delegated"
  block:
    - name: "PostgreSQL | Delegated | Create database"
      community.postgresql.postgresql_db:
        name: "{{ zabbix_server_dbname }}"
        port: "{{ zabbix_server_dbport }}"
        state: present

    - name: "PostgreSQL | Delegated | Create database user"
      community.postgresql.postgresql_user:
        db: "{{ zabbix_server_dbname }}"
        name: "{{ zabbix_server_dbuser }}"
        password: "{{ ('md5' + (zabbix_server_dbpassword + zabbix_server_dbuser)|hash('md5')) if zabbix_server_dbpassword_hash_method == 'md5' else zabbix_server_dbpassword }}"
        port: "{{ zabbix_server_dbport }}"
        priv: ALL
        state: present
        encrypted: true

    - name: "PostgreSQL | Delegated | Create timescaledb extension"
      community.postgresql.postgresql_ext:
        db: "{{ zabbix_server_dbname }}"
        name: timescaledb
      when: zabbix_server_database_timescaledb
  become: true
  become_user: postgres
  delegate_to: "{{ zabbix_server_dbhost_run_install | ternary(delegated_dbhost, inventory_hostname) }}"
  vars:
    delegated_dbhost: "{{ (zabbix_server_dbhost == 'localhost') | ternary(inventory_hostname, zabbix_server_dbhost) }}"
  when:
    - zabbix_server_database_creation
    - zabbix_server_pgsql_login_host is not defined
  tags:
    - database

- name: "PostgreSQL | Remote"
  block:
    - name: "PostgreSQL | Remote | Create database"
      community.postgresql.postgresql_db:
        login_host: "{{ zabbix_server_pgsql_login_host | default(omit) }}"
        login_user: "{{ zabbix_server_pgsql_login_user | default(omit) }}"
        login_password: "{{ zabbix_server_pgsql_login_password | default(omit) }}"
        login_unix_socket: "{{ zabbix_server_pgsql_login_unix_socket | default(omit) }}"
        name: "{{ zabbix_server_dbname }}"
        port: "{{ zabbix_server_dbport }}"
        state: present

    - name: "PostgreSQL | Remote | Create database user"
      community.postgresql.postgresql_user:
        login_host: "{{ zabbix_server_pgsql_login_host | default(omit) }}"
        login_user: "{{ zabbix_server_pgsql_login_user | default(omit) }}"
        login_password: "{{ zabbix_server_pgsql_login_password | default(omit) }}"
        db: "{{ zabbix_server_dbname }}"
        name: "{{ zabbix_server_dbuser }}"
        password: "{{ ('md5' + (zabbix_server_dbpassword + zabbix_server_dbuser)|hash('md5')) if zabbix_server_dbpassword_hash_method == 'md5' else zabbix_server_dbpassword }}"
        port: "{{ zabbix_server_dbport }}"
        priv: ALL
        state: present
        encrypted: true

    - name: "PostgreSQL | Remote | Create timescaledb extension"
      community.postgresql.postgresql_ext:
        login_host: "{{ zabbix_server_pgsql_login_host | default(omit) }}"
        login_user: "{{ zabbix_server_pgsql_login_user | default(omit) }}"
        login_password: "{{ zabbix_server_pgsql_login_password | default(omit) }}"
        login_unix_socket: "{{ zabbix_server_pgsql_login_unix_socket | default(omit) }}"
        db: "{{ zabbix_server_dbname }}"
        name: timescaledb
      when: zabbix_server_database_timescaledb
  when:
    - zabbix_server_database_creation
    - zabbix_server_pgsql_login_host is defined
  tags:
    - database

- name: "PostgreSQL | Create schema"
  ansible.builtin.shell: |
    set -euxo pipefail
    FILE={{ is_legacy_version | ternary('create', 'server') }}.sql
    cd {{ is_legacy_version | ternary(legacy_path, modern_path) }}
    if [ -f ${FILE}.gz ]
      then zcat ${FILE}.gz > /tmp/create.sql
    else
      cp ${FILE} /tmp/create.sql
    fi
    cat /tmp/create.sql | psql -h '{{ zabbix_server_dbhost }}' \
    -U '{{ zabbix_server_dbuser }}' \
    -d '{{ zabbix_server_dbname }}' \
    -p '{{ zabbix_server_dbport }}'
    touch /etc/zabbix/schema.done
    rm -f /tmp/create.sql
  args:
    creates: /etc/zabbix/schema.done
    executable: /bin/bash
    warn: "{{ produce_warn | default(omit) }}"
  environment:
    PGPASSWORD: "{{ zabbix_server_dbpassword }}"
  become: true
  vars:
    is_legacy_version: "{{ zabbix_server_version is version('6.0', '<') }}"
    legacy_path: /usr/share/doc/zabbix-server-pgsql
    modern_path: /usr/share/zabbix-sql-scripts/postgresql
  when:
    - zabbix_server_database_sqlload
  tags:
    - database

- name: "PostgreSQL | Create TimescaleDB hypertables"
  ansible.builtin.shell: |
    set -euxo pipefail
    cd /usr/share/zabbix-sql-scripts/postgresql &&
    if [ -f timescaledb.sql.gz ]; then zcat timescaledb.sql.gz > /etc/timescaledb.sql ; else cp -p timescaledb.sql /etc/timescaledb.sql ; fi
    cat /etc/timescaledb.sql | psql -h '{{ zabbix_server_dbhost }}' \
    -U '{{ zabbix_server_dbuser }}' \
    -d '{{ zabbix_server_dbname }}' \
    -p '{{ zabbix_server_dbport }}'
    touch /etc/zabbix/timescaledb.done
    rm -f /tmp/timescaledb.sql
  args:
    creates: /etc/zabbix/timescaledb.done
    executable: /bin/bash
    warn: "{{ produce_warn | default(omit) }}"
  environment:
    PGPASSWORD: "{{ zabbix_server_dbpassword }}"
  become: true
  when:
    - zabbix_server_database_timescaledb
  tags:
    - database
