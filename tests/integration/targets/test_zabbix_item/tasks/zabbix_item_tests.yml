---
- name: "test: create item ExampleItem on host ExampleHostForItem with many options set"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    key: ExampleItem
    type: http
    url: localhost
    convert_json: true
    body_type: json
    body: {
      test: "yes"
    }
    http_method: GET
    retrieve_mode: both
    status_codes:
      - 200
      - 401
    state: present
    value_type: text
    update_interval: 1m
    preprocessing: [
      {
        type: json_error_check,
        params: "$.",
        error_handler: custom_message,
        error_handler_params: "An error occured..."
      },
      {
        type: trim,
        params: "\""
      }
    ]
    tags:
      - tag: ExampleItemTag
        value: ExampleTagValue
      - tag: ExampleItemTag2
        value: ExampleTagValue
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: try to create the same item with the same settings"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    key: ExampleItem
    type: http
    url: localhost
    convert_json: true
    body_type: json
    body: {
      test: "yes"
    }
    http_method: GET
    retrieve_mode: both
    status_codes:
      - 200
      - 401
    state: present
    value_type: text
    update_interval: 1m
    preprocessing: [
      {
        type: json_error_check,
        params: "$.",
        error_handler: custom_message,
        error_handler_params: "An error occured..."
      },
      {
        type: trim,
        params: "\""
      }
    ]
    tags:
      - tag: ExampleItemTag
        value: ExampleTagValue
      - tag: ExampleItemTag2
        value: ExampleTagValue
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: disable item"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    status: disabled
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: disable item (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    status: disabled
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: try to create the same item changing one parameter"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    key: ExampleItem
    type: http
    url: localhost
    convert_json: true
    body_type: json
    body: {
      "test": "yes"
    }
    retrieve_mode: both
    status_codes:
      - 200
      - 201
    state: present
    value_type: text
    update_interval: 1m
    preprocessing: [
      {
        type: bool_to_dec,
        error_handler: custom_message,
        error_handler_params: "An error occured..."
      },
      {
        type: trim,
        params: "\""
      }
    ]
  register: zabbix_item1

- name: changing the value of the already existing parameter status_codes should work and mark task as changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change the key of the item"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    key: ExampleItemKey_changed
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change the key of the item (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    key: ExampleItemKey_changed
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change description"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    description: ExampleItem Description Test
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change description (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    description: ExampleItem Description Test
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change preprocessing (remove one rule)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    preprocessing: [
      {
        type: trim,
        params: "\""
      }
    ]
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change preprocessing (add one rule)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    preprocessing: [
      {
        type: trim,
        params: "\""
      },
      {
        type: jsonpath,
        params: "$.",
        error_handler: discard
      }
    ]
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type to zabbix_agent"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: zabbix_agent
    interface: test-interface.zabbix.test:10050
    update_interval: 10m
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type zabbix_agent (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: zabbix_agent
    interface: test-interface.zabbix.test:10050
    update_interval: 10m
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change interface"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    interface: 10.1.1.1:10055
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change interface (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    interface: 10.1.1.1:10055
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change type zabbix_trapper"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: zabbix_trapper
    allowed_hosts: localhost
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type zabbix_trapper (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: zabbix_trapper
    allowed_hosts: localhost
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change type simple_check"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: simple_check
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type simple_check (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: simple_check
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change type zabbix_internal"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: zabbix_internal
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type zabbix_internal (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: zabbix_internal
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change type zabbix_agent_active"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: zabbix_agent_active
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type zabbix_agent_active (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: zabbix_agent_active
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change type external_check with dns specified interface"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: external_check
    interface: test-interface.zabbix.test:10050
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type external_check with dns specified interface (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: external_check
    interface: test-interface.zabbix.test:10050
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change type database_monitor"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: database_monitor
    db_query: SELECT * FROM test
    username: test
    password: test
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type database_monitor (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: database_monitor
    db_query: SELECT * FROM test
    username: test
    password: test
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change type ipmi"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: ipmi
    ipmi_sensor: root
    interface: 10.1.1.1:12346
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type ipmi (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: ipmi
    ipmi_sensor: root
    interface: 10.1.1.1:12346
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change type ssh using password"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: ssh
    update_interval: 10m
    authtype: password
    username: root
    password: test
    script: ls
    interface: test-interface.zabbix.test:10050
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type ssh using password (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: ssh
    update_interval: 10m
    authtype: password
    username: root
    password: test
    script: ls
    interface: test-interface.zabbix.test:10050
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change type ssh using publickey"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: ssh
    update_interval: 10m
    authtype: publickey
    username: root
    privatekey: ~/.ssh/id_rsa
    publickey: ~/.ssh/id_rsa.pub
    script: ls
    interface: test-interface.zabbix.test:10050
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type ssh using publickey (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: ssh
    update_interval: 10m
    authtype: publickey
    username: root
    privatekey: ~/.ssh/id_rsa
    publickey: ~/.ssh/id_rsa.pub
    script: ls
    interface: test-interface.zabbix.test:10050
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change type telnet"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: telnet
    update_interval: 10m
    authtype: publickey
    username: root
    password: test
    script: ls
    interface: test-interface.zabbix.test:10050
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type telnet (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: telnet
    update_interval: 10m
    authtype: publickey
    username: root
    password: test
    script: ls
    interface: test-interface.zabbix.test:10050
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change type calculated"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: calculated
    update_interval: 10m
    script: 1 + 1
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type calculated (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: calculated
    update_interval: 10m
    script: 1 + 1
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change type jmx"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: jmx
    update_interval: 10m
    interface: 10.1.1.1:77
    jmx_endpoint: service:jmx
    username: root
    password: test
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type jmx (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: jmx
    update_interval: 10m
    interface: 10.1.1.1:77
    jmx_endpoint: service:jmx
    username: root
    password: test
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change type snmp_trap"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: snmp_trap
    interface: 10.1.1.1:12345
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type snmp_trap (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: snmp_trap
    interface: 10.1.1.1:12345
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: Create master item for dependent check
  community.zabbix.zabbix_item:
    item_name: ExampleMasterItem
    host_name: ExampleHostForItem
    key: ExampleHostForItem.ExampleMasterItem
    type: zabbix_internal
    value_type: text
    update_interval: 1m
  register: zabbix_item1

- name: "test: change type dependent"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: dependent
    master_item: ExampleMasterItem
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type dependent (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: dependent
    master_item: ExampleMasterItem
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change type http no auth"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: http
    update_interval: 1m
    interface: 10.1.1.1:10050
    allow_traps: true
    authtype: none
    follow_redirects: true
    headers: {
      User-Agent: 'Zabbix'
    }
    http_proxy: 8.8.8.8
    convert_json: true
    body_type: raw
    body: "test123"
    url_query: {
      test: 'yes'
    }
    retrieve_mode: both
    ssl_cert_file: /tmp/temp.cert
    ssl_key_file: /tmp/key.kex
    ssl_key_password: test
    status_codes:
      - 200
      - 400-405
    timeout: 30s
    allowed_hosts: localhost
    verify_host: true
    verify_peer: true
    url: google.com
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type http no auth (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: http
    update_interval: 1m
    interface: 10.1.1.1:10050
    allow_traps: true
    authtype: none
    follow_redirects: true
    headers: {
      User-Agent: 'Zabbix'
    }
    http_proxy: 8.8.8.8
    convert_json: true
    body_type: raw
    body: "test123"
    url_query: {
      test: 'yes'
    }
    retrieve_mode: both
    ssl_cert_file: /tmp/temp.cert
    ssl_key_file: /tmp/key.kex
    ssl_key_password: test
    status_codes:
      - 200
      - 400-405
    timeout: 30s
    allowed_hosts: localhost
    verify_host: true
    verify_peer: true
    url: google.com
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change type http basic auth"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    authtype: basic
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type http no auth (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    authtype: basic
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change type http ntlm auth"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: http
    authtype: ntlm
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type http ntlm auth (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: http
    authtype: ntlm
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change type http kerberos auth"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: http
    authtype: kerberos
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type http kerberos auth (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: http
    authtype: kerberos
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change type http body_type json"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    body_type: json
    body: {
      test: "true"
    }
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type http body_type json (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    body_type: json
    body: {
      test: "true"
    }
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change type http body_type xml"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    body_type: xml
    body: "<xml />"
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type http body_type xml (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    body_type: xml
    body: "<xml />"
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change type http http_method POST"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    http_method: POST
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type http http_method POST (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    http_method: POST
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change type http http_method PUT"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    http_method: PUT
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type http http_method PUT (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    http_method: PUT
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change type http http_method HEAD"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    http_method: HEAD
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type http http_method HEAD (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    http_method: HEAD
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change type snmp_agent"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: snmp_agent
    interface: 10.1.1.1:12345
    snmp_oid: .1
    update_interval: 10m
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type snmp_agent (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: snmp_agent
    interface: 10.1.1.1:12345
    snmp_oid: .1
    update_interval: 10m
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

- name: "test: change type script"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: script
    update_interval: 10m
    script: echo "test"
    parameters: {
      test: "yes",
      test2: "no"
    }
  register: zabbix_item1

- name: expect to succeed and that things changed
  ansible.builtin.assert:
    that:
      - "zabbix_item1 is changed"

- name: "test: change type script (again)"
  community.zabbix.zabbix_item:
    item_name: ExampleItem
    host_name: ExampleHostForItem
    type: script
    update_interval: 10m
    script: echo "test"
    parameters: {
      test: "yes",
      test2: "no"
    }
  register: zabbix_item1

- name: updating with same values should be idempotent
  ansible.builtin.assert:
    that:
      - "not zabbix_item1 is changed"

