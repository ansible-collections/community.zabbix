---
- name: Start with a known state with one rule enabled
  community.zabbix.zabbix_authentication:
    passwd_check_rules: "avoid_easy_to_guess"

- name: Set request parameters based on Zabbix version (Zabbix < 6.4)
  ansible.builtin.set_fact:
    authentication_get_body:
      jsonrpc: "2.0"
      method: "authentication.get"
      params: {}
      id: 1
      auth: "{{ check_login_under64_result.json.result }}"
  when: zabbix_version is version("6.4", "<")

- name: Set request parameters based on Zabbix version (Zabbix >= 6.4)
  ansible.builtin.set_fact:
    authentication_get_body:
      jsonrpc: "2.0"
      method: "authentication.get"
      params: {}
      id: 1
    authentication_get_headers:
      Authorization: "Bearer {{ check_login_result.json.result }}"
  when: zabbix_version is version("6.4", ">=")

- name: Get the authentication rules
  ansible.builtin.uri:
    url: "{{ zabbix_api_server_url }}/api_jsonrpc.php"
    method: POST
    body: "{{ authentication_get_body }}"
    headers: "{{ authentication_get_headers | default(omit) }}"
    body_format: json
    status_code: 200
  register: get_auth_result

# Internally the value of 8 represents an "avoid_easy_to_guess" rule
- name: Assert that the passwd_check_rules is 8 (avoid_easy_to_guess)
  ansible.builtin.assert:
    that:
      - get_auth_result.json.result.passwd_check_rules == "8"

- name: Disable all password check rules
  community.zabbix.zabbix_authentication:
    passwd_check_rules: []

- name: Get the authentication rules
  ansible.builtin.uri:
    url: "{{ zabbix_api_server_url }}/api_jsonrpc.php"
    method: POST
    body: "{{ authentication_get_body }}"
    headers: "{{ authentication_get_headers | default(omit) }}"
    body_format: json
    status_code: 200
  register: get_auth_result

# Internally the value of 0 represents an empty password check rule set
- name: Assert that the passwd_check_rules is empty
  ansible.builtin.assert:
    that:
      - get_auth_result.json.result.passwd_check_rules == "0"
